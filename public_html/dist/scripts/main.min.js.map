{"version":3,"file":"main.min.js","sources":["screen.js","main.js"],"sourcesContent":["/**\r\n * Screen class.\r\n */\r\n\r\nclass Screen {\r\n    /**\r\n     * Render method.\r\n     *\r\n     * @param value\r\n     */\r\n\r\n    render(value) {\r\n        this.element.innerText = value;\r\n    }\r\n}\r\n\r\nexport const Screen = new Screen();","\"use strict\";\n\nimport {Screen} from \"./screen.js\";\n// ! [[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]\n//https://stackoverflow.com/questions/44958216/how-to-minify-es6-functions-with-gulp-uglify\n// rename main.js to app.js\n// npm tasks\n// npm list tasks\n//https://stackoverflow.com/questions/31593694/do-i-need-require-js-when-i-use-babel\n//https://github.com/wbkd/webpack-starter\n\n/**\n * Fluid Typewriter.\n *\n * A lightweight native JavaScript library for typewriter effects.\n *\n * @author Louis Young\n * @licence MIT\n * @version 0.1.0\n */\n\n/**\n * TypeWriter class.\n *\n * @extends Screen\n */\n\nclass TypeWriter extends Screen {\n    constructor(props) {\n        super();\n\n        /**\n         * Default configuration values.\n         */\n\n        this.config = {\n            delay: 1500,\n            empty: \"\",\n            loop: false,\n            speeds: {\n                fast: 125,\n                medium: 200,\n                slow: 1000\n            }\n        };\n\n        if (props) {\n            this.props = props;\n            this.element = document.querySelector(props.selector) || null;\n            this.words = props.words || JSON.parse(this.element.getAttribute(\"data-typewriter-words\")) || null;\n            this.delay = props.delay || Number(this.element.getAttribute(\"data-typewriter-delay\")) || this.config.delay;\n            this.loop = props.loop || JSON.parse(this.element.getAttribute(\"data-typewriter-loop\")) || this.config.loop;\n            this.speeds = (props.speeds || this.config.speeds) || null;\n            Object.assign(this, {\n                fast: this.speeds.fast,\n                medium: this.speeds.medium,\n                slow: this.speeds.slow\n            });\n            this.text = this.config.empty;\n            this.speed = this.medium;\n            this.index = 0;\n            this.deleting = false;\n            this.totalWords = this.words.length - 1;\n\n            this.initialize();\n        }\n\n    }\n\n    /**\n     * Initialzie method.\n     */\n\n    initialize() {\n        // Begin the type loop.\n        setTimeout(() => {\n            this.write();\n        }, this.delay);\n    }\n\n    /**\n     * Next word method.\n     * \n     */\n\n    nextWord() {\n        if (this.index < this.totalWords) {\n            this.index++;\n        } else {\n            this.index = 0;\n        }\n        this.deleting = false;\n        this.text = this.config.empty;\n        this.speed = this.medium;\n    }\n\n    /**\n     * Stroke method.\n     * \n     * @param state \n     */\n\n    stroke(state) {\n        let length;\n        if (state === 'remove') {\n            length = this.text.length - 1;\n        } else if (state === 'add') {\n            length = this.text.length + 1;\n        }\n\n        this.text = this.word.substring(0, length);\n        this.speed = this.fast;\n    }\n\n    /**\n     * Write method.\n     *\n     * Compare the current data and decide what to do with it.\n     */\n\n    write() {\n\n        if (this.words[this.index]) {\n            this.word = this.words[this.index];\n        }\n\n        if (this.text === this.word && this.deleting === false) {\n            // Start deleting.\n            if (this.loop === false && this.index === this.totalWords) {\n                return;\n            } else {\n                this.deleting = true;\n                this.speed = this.slow;\n            }\n        } else if (this.deleting && this.text === this.config.empty) {\n            this.nextWord();\n        } else if (this.deleting) {\n            this.stroke('remove');\n        } else if (this.deleting === false) {\n            this.stroke('add');\n        }\n\n        // Recall the type method to continue typing at the given speed.\n        setTimeout(() => {\n            this.write();\n        }, this.speed);\n\n        // Render the new value.\n        Screen.render(this.text);\n\n        // console.log(`\n        // Variables from the 'write' method scope:\n        //\n        // this.deleting: ${this.deleting} \n        // this.index: ${this.index} \n        // this.word: ${word} \n        // this.text: ${this.text} \n        // this.delay: ${this.delay} \n        // this.speed: ${this.speed}`);\n    }\n}\n\n// Instantiate the TypeWriter object.\ndocument.addEventListener('DOMContentLoaded', () => {\n    new TypeWriter({\n        selector: \".element\"\n    });\n})\n\n// new TypeWriter({\n//   selector: \".element\",\n//   words: [\"PROP\", \"WORDS\"],\n//   delay: 0,\n//   loop: true,\n//   speed: {\n//     fast: 100,\n//     medium: 200,\n//     slow: 300,\n//   }\n// });\n"],"names":[],"mappings":";;;;;;AAAA;;;;AAIA,MAAM,MAAM,CAAC;;;;;;;IAOT,MAAM,CAAC,KAAK,EAAE;QACV,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;KAClC;CACJ;;AAED,AAAO,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE;;ACblC;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwIA;;;;;;;;;;;;;;;;;;;;"}